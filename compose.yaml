services:
  mysql:
    image: mysql:8.1
    ports:
      - '127.0.0.1:3306:3306'
    environment:
      - 'MYSQL_DATABASE=db'
      - 'MYSQL_PASSWORD=password'
      - 'MYSQL_ROOT_PASSWORD=password'
      - 'MYSQL_USER=user'
    restart: always
  frontend:
    image: "spring-htmx-demo:0.0.1-SNAPSHOT"
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:5005:5005"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - OTEL_SERVICE_NAME=todo-frontend
      - OTEL_METRIC_EXPORT_INTERVAL=5000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
      - BACKEND_HOST_NAME=backend
      - BACKEND_PORT=8081
      # https://spring.io/guides/gs/spring-boot-docker#:~:text=Debugging%20the%20Application%20in%20a%20Docker%20Container
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - mysql
      - jaeger
      - loki
      - collector
      - backend
  backend:
    image: "spring-htmx-demo:0.0.1-SNAPSHOT"
    ports:
      - "127.0.0.1:8081:8081"
      - "127.0.0.1:5006:5006"
    environment:
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - OTEL_SERVICE_NAME=todo-backend
      - OTEL_METRIC_EXPORT_INTERVAL=5000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
      # https://spring.io/guides/gs/spring-boot-docker#:~:text=Debugging%20the%20Application%20in%20a%20Docker%20Container
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
    depends_on:
      - mysql
      - jaeger
      - loki
      - collector
  nginx:
    image: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/templates:/etc/nginx/templates
    ports:
      - '127.0.0.1:80:80'
    environment:
      - APP_SERVER_HOST_NAME=frontend
      - APP_SERVER_PORT=8080
      - RELIABLE_ADDRESS_SPACE=10.0.0.0/16
    depends_on:
      - frontend
      - backend
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      # https://www.jaegertracing.io/docs/next-release/getting-started/#all-in-one
      - "127.0.0.1:16686:16686" # serve frontend
      - "127.0.0.1:5318:4318" # accept OpenTelemetry Protocol (OTLP) over HTTP
      - "127.0.0.1:4317:4317" # accept OpenTelemetry Protocol (OTLP) over gRPC
  loki:
    image: grafana/loki:latest
    # https://github.com/grafana/loki/issues/5513#issuecomment-2156115355
    user: root
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "127.0.0.1:3000:3000"

  prometheus:
    image: prom/prometheus:latest
    command: --web.enable-otlp-receiver
    volumes:
      - ./prometheus/prometheus.yml:/prometheus/prometheus.yml
    ports:
      - "127.0.0.1:9090:9090"

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-collector/config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "127.0.0.1:1888:1888" # pprof extension
      - "127.0.0.1:13133:13133" # health_check extension
      - "127.0.0.1:4318:4318" # OTLP http receiver
      - "127.0.0.1:55679:55679" # zpages extension

  oteltui:
    image: ymtdzzz/otel-tui:latest
    # Show TUI in your current terminal session
    # $ docker compose attach oteltui
    container_name: otel-tui
    stdin_open: true
    tty: true